*note: you should already have a .pem file from AWS. know the location of this file. This .pem file is your key|secret key file

1. Setup an ec2 instance on AWS. Use community AMI that already has anaconda installed on it. I choose the kaggle-machine ami-715ccb66. Record the Public DNS and Public IP. 

2. Go to your instance and click on Security Groups in the sidebar. Choose your instance and click on Inbound. Then add a Custom TCP Rule with Port Range 8888 and Source 0.0.0.0/0

3. open a terminal and ssh into ec2 instance. 
ssh -i ~/Downloads/gupta1.pem ubuntu@IP_Address 

#if using a ubuntu machine, use ubuntu instead of ec2-user

4. you can copy files from your computer to your ec2 instance via the following
#scp -i ~/Downloads/gupta1.pem [path to file] ec2-user@ip_address:/path/to/destitation
#[-i identity_file]
scp -i ~/Downloads/gupta1.pem Untitled1.ipynb ec2-user@52.205.255.138:

5. in terminal type "pip install gensim==0.10.3" to install gensim

6. in terminal type "pip install pandas --upgrade" upgrade to newest version of pandas so you can open pandas pickle files

7. pip install --upgrade xgboost

8. upload your script and have fun!!!!!


ssh -i ~/Downloads/gupta1.pem ubuntu@54.197.198.192

#put file on aws instance, this is a terminal on my comp
scp -i ~/Downloads/gupta1.pem train_xgboost.py ubuntu@54.165.98.19:

#get file from aws instance, this is a terminal on my comp
scp -i ~/Downloads/gupta1.pem ubuntu@54.165.98.19:/home/ubuntu/train_doc2vec_aws.py ./


scp -i ~/Downloads/gupta1.pem ubuntu@174.129.77.21:/home/ubuntu/*.csv ./

scp -i ~/Downloads/gupta1.pem ubuntu@54.165.98.19:/home/ubuntu/xgbfinal2.model ./

scp -i ~/Downloads/gupta1.pem tweetsafe.tar.gz ubuntu@54.158.237.158:

scp -i ~/Downloads/gupta1.pem b* ec2-user@54.197.198.192:

ami-f37a1be4

create new web app
increase timeout counter under Updates and Deployments. Command timeout -> 1200
go to configuration and not the ami number
find that ami number and launch an ec2 instance with it
load doc2vec models onto that ec2 instance
stop that ec2 instance
create custom ami from that instance
use that custome ami in webapp

